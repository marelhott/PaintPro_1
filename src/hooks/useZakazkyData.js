
import { useState, useEffect } from 'react';
import { useAuth } from '../AuthContext';
import { filterMainOrdersOnly } from '../utils/dataFilters';

export const useZakazkyData = () => {
  const { currentUser, getUserData, addUserOrder, editUserOrder, deleteUserOrder } = useAuth();
  const [zakazkyData, setZakazkyData] = useState([]);

  // Naƒçten√≠ dat p≈ôi p≈ôihl√°≈°en√≠ u≈æivatele
  useEffect(() => {
    const loadUserData = async () => {
      if (currentUser?.id) {
        try {
          const data = await getUserData(currentUser.id);
          // OPRAVA: Bezpeƒçn√° kontrola dat z AuthContext
          let safeData = Array.isArray(data) ? data : [];
          
          // P≈òESUN: P≈ôesun hodnot z fee do pomocn√≠k a p≈ôepoƒç√≠t√°n√≠ zisku
          const updatedData = safeData.map(zakazka => {
            let updatedZakazka = { ...zakazka };
            
            // Pokud m√° fee hodnotu a pomocn√≠k je 0, p≈ôesu≈à fee do pomocn√≠k
            if (zakazka.fee > 0 && zakazka.pomocnik === 0) {
              updatedZakazka.pomocnik = zakazka.fee;
              updatedZakazka.fee = 0;
            }
            
            // P≈ôepoƒç√≠tej zisk podle aktu√°ln√≠ch hodnot
            const castka = Number(updatedZakazka.castka) || 0;
            const fee = Number(updatedZakazka.fee) || 0;
            const material = Number(updatedZakazka.material) || 0;
            const pomocnik = Number(updatedZakazka.pomocnik) || 0;
            const palivo = Number(updatedZakazka.palivo) || 0;
            
            updatedZakazka.zisk = castka - fee - material - pomocnik - palivo;
            
            return updatedZakazka;
          });
          
          setZakazkyData(updatedData);
          console.log('‚úÖ Data naƒçtena pro u≈æivatele:', currentUser.id, 'poƒçet zak√°zek:', updatedData.length);
        } catch (error) {
          console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ dat:', error);
          setZakazkyData([]); // Fallback na pr√°zdn√© pole
        }
      } else {
        setZakazkyData([]); // ≈Ω√°dn√Ω u≈æivatel = pr√°zdn√° data
      }
    };

    loadUserData();
  }, [currentUser?.id, getUserData]);

  // Funkce pro p≈ôid√°n√≠ zak√°zky
  const handleAddZakazka = async (zakazkaData) => {
    try {
      console.log('üîÑ handleAddZakazka vol√°na s daty:', zakazkaData);
      const updatedData = await addUserOrder(currentUser.id, zakazkaData);
      
      // addUserOrder nyn√≠ vrac√≠ kompletn√≠ seznam zak√°zek
      if (Array.isArray(updatedData)) {
        setZakazkyData(updatedData);
        console.log('‚úÖ Zak√°zka p≈ôid√°na, celkem zak√°zek:', updatedData.length);
      } else {
        // Fallback - znovu naƒçti data
        console.warn('‚ö†Ô∏è Neoƒçek√°van√Ω form√°t dat, naƒç√≠t√°m znovu...');
        const refreshedData = await getUserData(currentUser.id);
        const safeRefreshedData = Array.isArray(refreshedData) ? refreshedData : [];
        setZakazkyData(safeRefreshedData);
      }
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ zak√°zky:', error);
      alert('Chyba p≈ôi p≈ôid√°v√°n√≠ zak√°zky: ' + error.message);
      
      // Znovu naƒçti data z localStorage pro jistotu
      if (currentUser?.id) {
        try {
          const refreshedData = await getUserData(currentUser.id);
          const safeRefreshedData = Array.isArray(refreshedData) ? refreshedData : [];
          setZakazkyData(safeRefreshedData);
        } catch (refreshError) {
          console.error('‚ùå Chyba i p≈ôi naƒç√≠t√°n√≠ dat:', refreshError);
        }
      }
    }
  };

  // Funkce pro editaci zak√°zky
  const handleEditZakazka = async (editingZakazka, zakazkaData) => {
    try {
      console.log('üîÑ handleEditZakazka vol√°na s ID:', editingZakazka.id, 'data:', zakazkaData);
      const updatedData = await editUserOrder(currentUser.id, editingZakazka.id, zakazkaData);
      
      // editUserOrder nyn√≠ vrac√≠ kompletn√≠ seznam zak√°zek
      if (Array.isArray(updatedData)) {
        setZakazkyData(updatedData);
        console.log('‚úÖ Zak√°zka upravena, celkem zak√°zek:', updatedData.length);
      } else {
        // Fallback - znovu naƒçti data
        console.warn('‚ö†Ô∏è Neoƒçek√°van√Ω form√°t dat, naƒç√≠t√°m znovu...');
        const refreshedData = await getUserData(currentUser.id);
        const safeRefreshedData = Array.isArray(refreshedData) ? refreshedData : [];
        setZakazkyData(safeRefreshedData);
      }
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi √∫pravƒõ zak√°zky:', error);
      alert('Chyba p≈ôi √∫pravƒõ zak√°zky: ' + error.message);
    }
  };

  // Funkce pro smaz√°n√≠ zak√°zky
  const handleDeleteZakazka = async (orderId) => {
    try {
      const updatedData = await deleteUserOrder(currentUser.id, orderId);
      // OPRAVA: Bezpeƒçn√° kontrola dat p≈ôed nastaven√≠m state
      const safeData = Array.isArray(updatedData) ? updatedData : [];
      setZakazkyData(safeData);
      console.log('‚úÖ Zak√°zka smaz√°na, nov√° data:', safeData.length, 'z√°znam≈Ø');
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi maz√°n√≠ zak√°zky:', error);
    }
  };

  // Funkce pro aktualizaci soubor≈Ø zak√°zky
  const handleFilesUpdate = async (zakazkaId, newFiles) => {
    try {
      console.log(`üîÑ Aktualizuji soubory pro zak√°zku ${zakazkaId}, poƒçet soubor≈Ø: ${newFiles.length}`);
      
      // Najdi zak√°zku v aktu√°ln√≠ch datech
      const updatedZakazky = zakazkyData.map(zakazka => {
        if (zakazka.id === zakazkaId) {
          const updated = { ...zakazka, soubory: newFiles };
          console.log(`‚úÖ Zak√°zka ${zakazkaId} aktualizov√°na s ${newFiles.length} soubory`);
          return updated;
        }
        return zakazka;
      });

      // Aktualizuj lok√°ln√≠ state okam≈æitƒõ
      setZakazkyData(updatedZakazky);

      // Aktualizuj v Supabase na pozad√≠
      const zakazkaToUpdate = zakazkyData.find(z => z.id === zakazkaId);
      if (zakazkaToUpdate && currentUser?.id) {
        try {
          await editUserOrder(currentUser.id, zakazkaId, {
            ...zakazkaToUpdate,
            soubory: newFiles
          });
          console.log(`üíæ Soubory ulo≈æeny do datab√°ze pro zak√°zku ${zakazkaId}`);
        } catch (dbError) {
          console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠ do datab√°ze:', dbError);
          // I kdy≈æ se nepoda≈ô√≠ ulo≈æit do DB, lok√°ln√≠ stav z≈Østane aktualizovan√Ω
        }
      }

    } catch (error) {
      console.error('‚ùå Chyba p≈ôi aktualizaci soubor≈Ø:', error);
    }
  };

  return {
    zakazkyData,
    setZakazkyData,
    handleAddZakazka,
    handleEditZakazka,
    handleDeleteZakazka,
    handleFilesUpdate
  };
};
