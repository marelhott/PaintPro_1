
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://lseqrqmtjymukewnejdd.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxzZXFycW10anltdWtld25lamRkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIyNjQ2MjcsImV4cCI6MjA2Nzg0MDYyN30.SgWjc-GETZ_D0tJNtErxXhUaH6z_MgRJtxc94RsUXPw';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkLocalData() {
  console.log('üîç === KONTROLA LOK√ÅLN√çCH DAT ===');
  console.log('‚è∞', new Date().toLocaleString('cs-CZ'));
  
  // Smazan√© IDs
  const deletedIds = [59, 61, 62, 63, 65, 66, 68, 69, 70];
  
  console.log('üóëÔ∏è Smazan√© ID zak√°zek:', deletedIds);
  
  // Zkontroluj aktu√°ln√≠ stav v Supabase
  console.log('\nüìä Aktu√°ln√≠ stav v Supabase:');
  const { data: currentOrders } = await supabase
    .from('orders')
    .select('id')
    .eq('user_id', 'admin_1')
    .order('id');
    
  if (currentOrders) {
    const existingIds = currentOrders.map(o => o.id);
    console.log('‚úÖ Existuj√≠c√≠ ID v datab√°zi:', existingIds.join(', '));
    
    const missingIds = deletedIds.filter(id => !existingIds.includes(id));
    console.log('‚ùå Chybƒõj√≠c√≠ ID:', missingIds);
  }
  
  // Zkontroluj localStorage
  console.log('\nüíæ Kontrola localStorage:');
  try {
    // Simulace kontroly localStorage (v Node.js to nebude fungovat)
    console.log('‚ÑπÔ∏è localStorage kontrola mus√≠ b√Ωt provedena v prohl√≠≈æeƒçi');
    console.log('üìã Zkontroluj v Developer Tools:');
    console.log('   - localStorage.getItem("zakazky_admin_1")');
    console.log('   - localStorage.getItem("offline_queue")');
    console.log('   - sessionStorage.getItem("cache_admin_1")');
  } catch (e) {
    console.log('‚ùå localStorage nedostupn√Ω v Node.js prost≈ôed√≠');
  }
  
  // Vytvo≈ô z√°kladn√≠ template pro obnovu
  console.log('\nüîß Template pro obnovu smazanych zak√°zek:');
  const recoveryTemplate = deletedIds.map(id => ({
    id: id,
    user_id: 'admin_1',
    datum: new Date().toLocaleDateString('cs-CZ'),
    druh: 'OBNOVA',
    klient: 'Obnoven√° zak√°zka',
    cislo: `RECOVERY-${id}`,
    castka: 0,
    fee: 0,
    fee_off: 0,
    material: 0,
    pomocnik: 0,
    palivo: 0,
    adresa: 'Nezn√°m√°',
    typ: 'byt',
    doba_realizace: 1,
    poznamka: `Obnoven√° zak√°zka ID ${id} - p≈Øvodn√≠ data ztracena`,
    soubory: [],
    zisk: 0,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }));
  
  console.log('üìù Recovery template vytvo≈ôen pro', recoveryTemplate.length, 'zak√°zek');
  
  // Nab√≠dni mo≈ænosti obnovy
  console.log('\nüéØ MO≈ΩNOSTI OBNOVY:');
  console.log('1. Obnov s pr√°zdn√Ωmi daty (rychl√©)');
  console.log('2. Zkontroluj z√°lohy v attached_assets');
  console.log('3. Zkontroluj browser cache manu√°lnƒõ');
  console.log('4. Vytvo≈ô nov√© zak√°zky s origin√°ln√≠mi ID');
  
  return recoveryTemplate;
}

// Funkce pro obnovu s pr√°zdn√Ωmi daty
async function restoreWithEmptyData(template) {
  console.log('\nüîÑ === OBNOVA S PR√ÅZDN√ùMI DATY ===');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (const order of template) {
    try {
      const { error } = await supabase
        .from('orders')
        .insert([order]);
      
      if (error) {
        console.error(`‚ùå Chyba p≈ôi obnovƒõ ID ${order.id}:`, error.message);
        errorCount++;
      } else {
        console.log(`‚úÖ Obnovena zak√°zka ID: ${order.id}`);
        successCount++;
      }
      
      // Pauza mezi vkl√°d√°n√≠m
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (e) {
      console.error(`üí• Fat√°ln√≠ chyba u ID ${order.id}:`, e.message);
      errorCount++;
    }
  }
  
  console.log('\nüìä V√ùSLEDEK OBNOVY:');
  console.log(`‚úÖ √öspƒõ≈°nƒõ obnoveno: ${successCount} zak√°zek`);
  console.log(`‚ùå Chyby: ${errorCount} zak√°zek`);
  
  if (successCount > 0) {
    console.log('üéâ OBNOVA DOKONƒåENA - restartuj aplikaci');
  }
}

// Spus≈• kontrolu
checkLocalData()
  .then(template => {
    console.log('\n‚ùì Chce≈° obnovit zak√°zky s pr√°zdn√Ωmi daty? (spus≈• znovu s parametrem "restore")');
    
    if (process.argv[2] === 'restore') {
      return restoreWithEmptyData(template);
    }
  })
  .catch(console.error);
